Script started on Sun 03 May 2020 12:59:25 AM EEST
eina.theina.theina.ththeory  is ls
SPCHK: array declaration: declaring a size - 1 variable `a.size_minus_1' associated with the array.
SPCHK: warning: value `0' already declared.
Parsing Complete
generating vocab
SPCHK: warning: value `1' already declared.
SPCHK: formula 0: (<= 0 left).
SPCHK: formula 1: (<= 0 right).
SPCHK: formula 2: (<= 0 i).
SPCHK: formula 3: (<= 0 qi).
SPCHK: formula 4: (<= 0 (+ 1 qi)).
SPCHK: formula 5: (= left 0).
SPCHK: formula 6: (<= left a.size_minus_1).
SPCHK: formula 7: (= a.size_minus_1 left).
SPCHK: formula 8: (= right 0).
SPCHK: formula 9: (<= right a.size_minus_1).
SPCHK: formula 10: (= a.size_minus_1 right).
SPCHK: formula 11: (<= right left).
SPCHK: formula 12: (= left right).
SPCHK: formula 13: (= e (select a i)).
SPCHK: formula 14: (= e (select a qi)).
SPCHK: formula 15: (= e (select a (+ 1 qi))).
SPCHK: formula 16: (= i 0).
SPCHK: formula 17: (<= i a.size_minus_1).
SPCHK: formula 18: (= a.size_minus_1 i).
SPCHK: formula 19: (<= i left).
SPCHK: formula 20: (= left i).
SPCHK: formula 21: (<= i right).
SPCHK: formula 22: (= right i).
SPCHK: formula 23: (= 0 qi).
SPCHK: formula 24: (<= qi a.size_minus_1).
SPCHK: formula 25: (= a.size_minus_1 qi).
SPCHK: formula 26: (<= qi left).
SPCHK: formula 27: (= left qi).
SPCHK: formula 28: (<= qi right).
SPCHK: formula 29: (= right qi).
SPCHK: formula 30: (<= qi i).
SPCHK: formula 31: (= i qi).
32
(<= 0 left)
(<= 0 right)
(<= 0 i)
(<= 0 qi)
(<= 0 (+ 1 qi))
(= left 0)
(<= left a.size_minus_1)
(= a.size_minus_1 left)
(= right 0)
(<= right a.size_minus_1)
(= a.size_minus_1 right)
(<= right left)
(= left right)
(= e (select a i))
(= e (select a qi))
(= e (select a (+ 1 qi)))
(= i 0)
(<= i a.size_minus_1)
(= a.size_minus_1 i)
(<= i left)
(= left i)
(<= i right)
(= right i)
(= 0 qi)
(<= qi a.size_minus_1)
(= a.size_minus_1 qi)
(<= qi left)
(= left qi)
(<= qi right)
(= right qi)
(<= qi i)
(= i qi)
name : eina.thSPCHK: building SMT formulae from vocab...
(benchmark SMT: extrafuns( (a (Array Int Int)) (a.size_minus_1 Int) (left Int) (right Int) (e Int) (i Int) (qi Int)) :formula (<= 0 left) :formula ( not ( (<= 0 left)) )  :formula (<= 0 right) :formula ( not ( (<= 0 right)) )  :formula (<= 0 i) :formula ( not ( (<= 0 i)) )  :formula (<= 0 qi) :formula ( not ( (<= 0 qi)) )  :formula (<= 0 (+ 1 qi)) :formula ( not ( (<= 0 (+ 1 qi))) )  :formula (= left 0) :formula ( not ( (= left 0)) )  :formula (<= left a.size_minus_1) :formula ( not ( (<= left a.size_minus_1)) )  :formula (= a.size_minus_1 left) :formula ( not ( (= a.size_minus_1 left)) )  :formula (= right 0) :formula ( not ( (= right 0)) )  :formula (<= right a.size_minus_1) :formula ( not ( (<= right a.size_minus_1)) )  :formula (= a.size_minus_1 right) :formula ( not ( (= a.size_minus_1 right)) )  :formula (<= right left) :formula ( not ( (<= right left)) )  :formula (= left right) :formula ( not ( (= left right)) )  :formula (= e (select a i)) :formula ( not ( (= e (select a i))) )  :formula (= e (select a qi)) :formula ( not ( (= e (select a qi))) )  :formula (= e (select a (+ 1 qi))) :formula ( not ( (= e (select a (+ 1 qi)))) )  :formula (= i 0) :formula ( not ( (= i 0)) )  :formula (<= i a.size_minus_1) :formula ( not ( (<= i a.size_minus_1)) )  :formula (= a.size_minus_1 i) :formula ( not ( (= a.size_minus_1 i)) )  :formula (<= i left) :formula ( not ( (<= i left)) )  :formula (= left i) :formula ( not ( (= left i)) )  :formula (<= i right) :formula ( not ( (<= i right)) )  :formula (= right i) :formula ( not ( (= right i)) )  :formula (= 0 qi) :formula ( not ( (= 0 qi)) )  :formula (<= qi a.size_minus_1) :formula ( not ( (<= qi a.size_minus_1)) )  :formula (= a.size_minus_1 qi) :formula ( not ( (= a.size_minus_1 qi)) )  :formula (<= qi left) :formula ( not ( (<= qi left)) )  :formula (= left qi) :formula ( not ( (= left qi)) )  :formula (<= qi right) :formula ( not ( (<= qi right)) )  :formula (= right qi) :formula ( not ( (= right qi)) )  :formula (<= qi i) :formula ( not ( (<= qi i)) )  :formula (= i qi) :formula ( not ( (= i qi)) ) )
SPCHK: parsing SMT formulae...
SPCHK: made 8 declarations as follows.
SPCHK:   0; NAME:i; DCL:(define i Int); AST:24cc248
SPCHK:   1; NAME:qi; DCL:(define qi Int); AST:24cc268
SPCHK:   2; NAME:a; DCL:(define a (Array Int Int)); AST:24cc2e8
SPCHK:   3; NAME:a.size_minus_1; DCL:(define a.size_minus_1 Int); AST:24cc2a8
SPCHK:   5; NAME:left; DCL:(define left Int); AST:24cc208
SPCHK:   6; NAME:right; DCL:(define right Int); AST:24cc228
SPCHK:   7; NAME:e; DCL:(define e Int); AST:24cc2c8
SPCHK: asserting 32 retractable formulas and their negations...
SPCHK:   formula 0: (<= 0 left)
SPCHK:   formula 1: (<= 0 right)
SPCHK:   formula 2: (<= 0 i)
SPCHK:   formula 3: (<= 0 qi)
SPCHK:   formula 4: (<= 0 (+ 1 qi))
SPCHK:   formula 5: (= left 0)
SPCHK:   formula 6: (<= left a.size_minus_1)
SPCHK:   formula 7: (= a.size_minus_1 left)
SPCHK:   formula 8: (= right 0)
SPCHK:   formula 9: (<= right a.size_minus_1)
SPCHK:   formula 10: (= a.size_minus_1 right)
SPCHK:   formula 11: (<= right left)
SPCHK:   formula 12: (= left right)
SPCHK:   formula 13: (= e (select a i))
SPCHK:   formula 14: (= e (select a qi))
SPCHK:   formula 15: (= e (select a (+ 1 qi)))
SPCHK:   formula 16: (= i 0)
SPCHK:   formula 17: (<= i a.size_minus_1)
SPCHK:   formula 18: (= a.size_minus_1 i)
SPCHK:   formula 19: (<= i left)
SPCHK:   formula 20: (= left i)
SPCHK:   formula 21: (<= i right)
SPCHK:   formula 22: (= right i)
SPCHK:   formula 23: (= 0 qi)
SPCHK:   formula 24: (<= qi a.size_minus_1)
SPCHK:   formula 25: (= a.size_minus_1 qi)
SPCHK:   formula 26: (<= qi left)
SPCHK:   formula 27: (= left qi)
SPCHK:   formula 28: (<= qi right)
SPCHK:   formula 29: (= right qi)
SPCHK:   formula 30: (<= qi i)
SPCHK:   formula 31: (= i qi)
eina.th
SPCHK: enumerating vocab evaluations using recursive traversal...
waiting to get new assignment...
name testls
SPCHK: checking choice...[]
SPCHK: Calling SMT Solver. This may take time..
SPCHK: choice is not satisfiable. 
SPCHK: Adding unsat core to eliminated patterns...[0 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ]
removing last used assignment
waiting to get new assignment...
No solutions
name testls
0:1
0:0
index : 0
value : 1
terminate called after throwing an instance of 'std::out_of_range'
  what():  vector::_M_range_check

Script done on Sun 03 May 2020 12:59:25 AM EEST
