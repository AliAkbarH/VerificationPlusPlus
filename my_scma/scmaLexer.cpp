/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : scma.g
 *     -                            On : 2020-04-29 01:52:50
 *     -                 for the lexer : scmaLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#define	ANTLR3_INLINE_INPUT_ASCII

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "scmaLexer.h"
/* ----------------------------------------- */


/** String literals used by scmaLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x74, 0x68, 0x65, 0x6F, 0x72, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x67, 0x72, 0x61, 0x6D, 0x6D, 0x61, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x6E, 0x75, 0x6D, 0x5F, 0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x5F, 0x70, 0x65, 0x72, 0x5F, 0x63, 0x6C, 0x61, 0x75, 0x73, 0x65, 0x5F, 0x62, 0x6F, 0x75, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x6E, 0x75, 0x6D, 0x5F, 0x71, 0x75, 0x61, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5F, 0x62, 0x6F, 0x75, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x76, 0x6F, 0x63, 0x61, 0x62,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x63, 0x6F, 0x6E, 0x73, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x75, 0x6E, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x69, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x6C, 0x6F, 0x63, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x5B, 0x5D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x6E, 0x6F, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x66, 0x6F, 0x72, 0x61, 0x6C, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x62, 0x6F, 0x75, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x69, 0x6E, 0x64, 0x65, 0x78,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x61, 0x72, 0x69, 0x74, 0x68, 0x6D, 0x65, 0x74, 0x69, 0x63,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x72, 0x65, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x61, 0x6E, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x69, 0x6D, 0x70, 0x6C, 0x69, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x65, 0x71, 0x75, 0x69, 0x76,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x78, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x78, 0x6E, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x2D, 0x3E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pscmaLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pscmaLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pscmaLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pscmaLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define	    NEXTCHAR			((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP				((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR			((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP				((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define	    CONSUME()											\
{																	\
    if	(NEXTCHAR < (DATAP + INPUT->sizeBuf))						\
    {																\
		INPUT->charPositionInLine++;								\
		if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)		\
		{															\
			INPUT->line++;											\
			INPUT->charPositionInLine	= 0;						\
			INPUT->currentLine		= (void *)(NEXTCHAR + 1);		\
		}															\
		INPUT->nextChar = (void *)(NEXTCHAR + 1);					\
    }																\
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()				INPUT->istream->consume(INPUT->istream)
#define	    LA(n)					INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mT__15    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__16    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__17    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__18    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__19    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__20    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__21    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__22    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__23    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__24    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__25    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__26    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__27    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__28    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__29    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__30    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__31    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__32    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__33    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__34    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__35    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__36    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__37    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__38    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__39    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__40    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__41    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__42    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__43    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__44    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__45    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__46    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__47    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__48    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mT__49    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mRELATIONAL_OP    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mADDITION_OP    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mPRODUCT_OP    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mBOOLEAN_OP    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mSTRING    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mIDENTIFIER    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mLETTER    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mDECIMAL_LITERAL    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mWS    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mLINE_COMMENT    (pscmaLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pscmaLexer ctx);
static void	scmaLexerFree(pscmaLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
scmaLexerFree  (pscmaLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "scma.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called scmaLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pscmaLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pscmaLexer scmaLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return scmaLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called scmaLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pscmaLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pscmaLexer scmaLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pscmaLexer ctx; // Context structure we will build and return

    ctx = (pscmaLexer) ANTLR3_CALLOC(1, sizeof(scmaLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in scmaLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our scmaLexer interface
     */
    ctx->mT__15	= mT__15;
    ctx->mT__16	= mT__16;
    ctx->mT__17	= mT__17;
    ctx->mT__18	= mT__18;
    ctx->mT__19	= mT__19;
    ctx->mT__20	= mT__20;
    ctx->mT__21	= mT__21;
    ctx->mT__22	= mT__22;
    ctx->mT__23	= mT__23;
    ctx->mT__24	= mT__24;
    ctx->mT__25	= mT__25;
    ctx->mT__26	= mT__26;
    ctx->mT__27	= mT__27;
    ctx->mT__28	= mT__28;
    ctx->mT__29	= mT__29;
    ctx->mT__30	= mT__30;
    ctx->mT__31	= mT__31;
    ctx->mT__32	= mT__32;
    ctx->mT__33	= mT__33;
    ctx->mT__34	= mT__34;
    ctx->mT__35	= mT__35;
    ctx->mT__36	= mT__36;
    ctx->mT__37	= mT__37;
    ctx->mT__38	= mT__38;
    ctx->mT__39	= mT__39;
    ctx->mT__40	= mT__40;
    ctx->mT__41	= mT__41;
    ctx->mT__42	= mT__42;
    ctx->mT__43	= mT__43;
    ctx->mT__44	= mT__44;
    ctx->mT__45	= mT__45;
    ctx->mT__46	= mT__46;
    ctx->mT__47	= mT__47;
    ctx->mT__48	= mT__48;
    ctx->mT__49	= mT__49;
    ctx->mRELATIONAL_OP	= mRELATIONAL_OP;
    ctx->mADDITION_OP	= mADDITION_OP;
    ctx->mPRODUCT_OP	= mPRODUCT_OP;
    ctx->mBOOLEAN_OP	= mBOOLEAN_OP;
    ctx->mSTRING	= mSTRING;
    ctx->mIDENTIFIER	= mIDENTIFIER;
    ctx->mLETTER	= mLETTER;
    ctx->mDECIMAL_LITERAL	= mDECIMAL_LITERAL;
    ctx->mWS	= mWS;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mLINE_COMMENT	= mLINE_COMMENT;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= scmaLexerFree;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 11:7: ( 'theory' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__15
 *
 * Looks to match the characters the constitute the token T__15
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__15(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__15;
       
    
    // scma.g:11:7: ( 'theory' )
    // scma.g:11:9: 'theory'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleT__15Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__15Ex; /* Prevent compiler warnings */
    ruleT__15Ex: ;

}
// $ANTLR end T__15

//   Comes from: 12:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__16
 *
 * Looks to match the characters the constitute the token T__16
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__16(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__16;
       
    
    // scma.g:12:7: ( '{' )
    // scma.g:12:9: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__16Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__16Ex; /* Prevent compiler warnings */
    ruleT__16Ex: ;

}
// $ANTLR end T__16

//   Comes from: 13:7: ( 'constants' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__17
 *
 * Looks to match the characters the constitute the token T__17
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__17(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__17;
       
    
    // scma.g:13:7: ( 'constants' )
    // scma.g:13:9: 'constants'
    {
        MATCHS(lit_2); 
        if  (HASEXCEPTION())
        {
            goto ruleT__17Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__17Ex; /* Prevent compiler warnings */
    ruleT__17Ex: ;

}
// $ANTLR end T__17

//   Comes from: 14:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__18
 *
 * Looks to match the characters the constitute the token T__18
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__18(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__18;
       
    
    // scma.g:14:7: ( ',' )
    // scma.g:14:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleT__18Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__18Ex; /* Prevent compiler warnings */
    ruleT__18Ex: ;

}
// $ANTLR end T__18

//   Comes from: 15:7: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__19
 *
 * Looks to match the characters the constitute the token T__19
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__19(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__19;
       
    
    // scma.g:15:7: ( '}' )
    // scma.g:15:9: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__19Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__19Ex; /* Prevent compiler warnings */
    ruleT__19Ex: ;

}
// $ANTLR end T__19

//   Comes from: 16:7: ( 'grammar' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__20
 *
 * Looks to match the characters the constitute the token T__20
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__20(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__20;
       
    
    // scma.g:16:7: ( 'grammar' )
    // scma.g:16:9: 'grammar'
    {
        MATCHS(lit_3); 
        if  (HASEXCEPTION())
        {
            goto ruleT__20Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__20Ex; /* Prevent compiler warnings */
    ruleT__20Ex: ;

}
// $ANTLR end T__20

//   Comes from: 17:7: ( 'num_operations_per_clause_bound' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__21
 *
 * Looks to match the characters the constitute the token T__21
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__21(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__21;
       
    
    // scma.g:17:7: ( 'num_operations_per_clause_bound' )
    // scma.g:17:9: 'num_operations_per_clause_bound'
    {
        MATCHS(lit_4); 
        if  (HASEXCEPTION())
        {
            goto ruleT__21Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__21Ex; /* Prevent compiler warnings */
    ruleT__21Ex: ;

}
// $ANTLR end T__21

//   Comes from: 18:7: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__22
 *
 * Looks to match the characters the constitute the token T__22
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__22(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__22;
       
    
    // scma.g:18:7: ( '=' )
    // scma.g:18:9: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleT__22Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__22Ex; /* Prevent compiler warnings */
    ruleT__22Ex: ;

}
// $ANTLR end T__22

//   Comes from: 19:7: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__23
 *
 * Looks to match the characters the constitute the token T__23
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__23(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__23;
       
    
    // scma.g:19:7: ( ';' )
    // scma.g:19:9: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__23Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__23Ex; /* Prevent compiler warnings */
    ruleT__23Ex: ;

}
// $ANTLR end T__23

//   Comes from: 20:7: ( 'num_quantifiers_bound' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__24
 *
 * Looks to match the characters the constitute the token T__24
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__24(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__24;
       
    
    // scma.g:20:7: ( 'num_quantifiers_bound' )
    // scma.g:20:9: 'num_quantifiers_bound'
    {
        MATCHS(lit_5); 
        if  (HASEXCEPTION())
        {
            goto ruleT__24Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__24Ex; /* Prevent compiler warnings */
    ruleT__24Ex: ;

}
// $ANTLR end T__24

//   Comes from: 21:7: ( 'vocab' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__25
 *
 * Looks to match the characters the constitute the token T__25
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__25(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__25;
       
    
    // scma.g:21:7: ( 'vocab' )
    // scma.g:21:9: 'vocab'
    {
        MATCHS(lit_6); 
        if  (HASEXCEPTION())
        {
            goto ruleT__25Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__25Ex; /* Prevent compiler warnings */
    ruleT__25Ex: ;

}
// $ANTLR end T__25

//   Comes from: 22:7: ( 'const' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__26
 *
 * Looks to match the characters the constitute the token T__26
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__26(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__26;
       
    
    // scma.g:22:7: ( 'const' )
    // scma.g:22:9: 'const'
    {
        MATCHS(lit_7); 
        if  (HASEXCEPTION())
        {
            goto ruleT__26Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__26Ex; /* Prevent compiler warnings */
    ruleT__26Ex: ;

}
// $ANTLR end T__26

//   Comes from: 23:7: ( 'universal' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__27
 *
 * Looks to match the characters the constitute the token T__27
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__27(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__27;
       
    
    // scma.g:23:7: ( 'universal' )
    // scma.g:23:9: 'universal'
    {
        MATCHS(lit_8); 
        if  (HASEXCEPTION())
        {
            goto ruleT__27Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__27Ex; /* Prevent compiler warnings */
    ruleT__27Ex: ;

}
// $ANTLR end T__27

//   Comes from: 24:7: ( 'global' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__28
 *
 * Looks to match the characters the constitute the token T__28
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__28(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__28;
       
    
    // scma.g:24:7: ( 'global' )
    // scma.g:24:9: 'global'
    {
        MATCHS(lit_9); 
        if  (HASEXCEPTION())
        {
            goto ruleT__28Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__28Ex; /* Prevent compiler warnings */
    ruleT__28Ex: ;

}
// $ANTLR end T__28

//   Comes from: 25:7: ( 'existential' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__29
 *
 * Looks to match the characters the constitute the token T__29
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__29(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__29;
       
    
    // scma.g:25:7: ( 'existential' )
    // scma.g:25:9: 'existential'
    {
        MATCHS(lit_10); 
        if  (HASEXCEPTION())
        {
            goto ruleT__29Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__29Ex; /* Prevent compiler warnings */
    ruleT__29Ex: ;

}
// $ANTLR end T__29

//   Comes from: 26:7: ( 'local' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__30
 *
 * Looks to match the characters the constitute the token T__30
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__30(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__30;
       
    
    // scma.g:26:7: ( 'local' )
    // scma.g:26:9: 'local'
    {
        MATCHS(lit_11); 
        if  (HASEXCEPTION())
        {
            goto ruleT__30Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__30Ex; /* Prevent compiler warnings */
    ruleT__30Ex: ;

}
// $ANTLR end T__30

//   Comes from: 27:7: ( 'int' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__31
 *
 * Looks to match the characters the constitute the token T__31
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__31(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__31;
       
    
    // scma.g:27:7: ( 'int' )
    // scma.g:27:9: 'int'
    {
        MATCHS(lit_12); 
        if  (HASEXCEPTION())
        {
            goto ruleT__31Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__31Ex; /* Prevent compiler warnings */
    ruleT__31Ex: ;

}
// $ANTLR end T__31

//   Comes from: 28:7: ( '[]' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__32
 *
 * Looks to match the characters the constitute the token T__32
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__32(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__32;
       
    
    // scma.g:28:7: ( '[]' )
    // scma.g:28:9: '[]'
    {
        MATCHS(lit_13); 
        if  (HASEXCEPTION())
        {
            goto ruleT__32Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__32Ex; /* Prevent compiler warnings */
    ruleT__32Ex: ;

}
// $ANTLR end T__32

//   Comes from: 29:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__33(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__33;
       
    
    // scma.g:29:7: ( '[' )
    // scma.g:29:9: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleT__33Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 30:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__34(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__34;
       
    
    // scma.g:30:7: ( ']' )
    // scma.g:30:9: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__34Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 31:7: ( 'boolean' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__35(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__35;
       
    
    // scma.g:31:7: ( 'boolean' )
    // scma.g:31:9: 'boolean'
    {
        MATCHS(lit_14); 
        if  (HASEXCEPTION())
        {
            goto ruleT__35Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 32:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__36(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__36;
       
    
    // scma.g:32:7: ( '-' )
    // scma.g:32:9: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__36Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 33:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__37(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__37;
       
    
    // scma.g:33:7: ( '(' )
    // scma.g:33:9: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleT__37Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 34:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__38(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__38;
       
    
    // scma.g:34:7: ( ')' )
    // scma.g:34:9: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__38Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 35:7: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__39(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__39;
       
    
    // scma.g:35:7: ( 'true' )
    // scma.g:35:9: 'true'
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleT__39Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 36:7: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__40
 *
 * Looks to match the characters the constitute the token T__40
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__40(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__40;
       
    
    // scma.g:36:7: ( 'false' )
    // scma.g:36:9: 'false'
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleT__40Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__40Ex; /* Prevent compiler warnings */
    ruleT__40Ex: ;

}
// $ANTLR end T__40

//   Comes from: 37:7: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__41
 *
 * Looks to match the characters the constitute the token T__41
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__41(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__41;
       
    
    // scma.g:37:7: ( '!' )
    // scma.g:37:9: '!'
    {
        MATCHC('!'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__41Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__41Ex; /* Prevent compiler warnings */
    ruleT__41Ex: ;

}
// $ANTLR end T__41

//   Comes from: 38:7: ( 'not' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__42
 *
 * Looks to match the characters the constitute the token T__42
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__42(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__42;
       
    
    // scma.g:38:7: ( 'not' )
    // scma.g:38:9: 'not'
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleT__42Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__42Ex; /* Prevent compiler warnings */
    ruleT__42Ex: ;

}
// $ANTLR end T__42

//   Comes from: 39:7: ( 'forall' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__43
 *
 * Looks to match the characters the constitute the token T__43
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__43(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__43;
       
    
    // scma.g:39:7: ( 'forall' )
    // scma.g:39:9: 'forall'
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleT__43Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__43Ex; /* Prevent compiler warnings */
    ruleT__43Ex: ;

}
// $ANTLR end T__43

//   Comes from: 40:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__44
 *
 * Looks to match the characters the constitute the token T__44
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__44(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__44;
       
    
    // scma.g:40:7: ( '.' )
    // scma.g:40:9: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleT__44Ex;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__44Ex; /* Prevent compiler warnings */
    ruleT__44Ex: ;

}
// $ANTLR end T__44

//   Comes from: 41:7: ( 'exists' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__45
 *
 * Looks to match the characters the constitute the token T__45
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__45(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__45;
       
    
    // scma.g:41:7: ( 'exists' )
    // scma.g:41:9: 'exists'
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleT__45Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__45Ex; /* Prevent compiler warnings */
    ruleT__45Ex: ;

}
// $ANTLR end T__45

//   Comes from: 42:7: ( 'bound' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__46
 *
 * Looks to match the characters the constitute the token T__46
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__46(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__46;
       
    
    // scma.g:42:7: ( 'bound' )
    // scma.g:42:9: 'bound'
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleT__46Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__46Ex; /* Prevent compiler warnings */
    ruleT__46Ex: ;

}
// $ANTLR end T__46

//   Comes from: 43:7: ( 'index' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__47
 *
 * Looks to match the characters the constitute the token T__47
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__47(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__47;
       
    
    // scma.g:43:7: ( 'index' )
    // scma.g:43:9: 'index'
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleT__47Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__47Ex; /* Prevent compiler warnings */
    ruleT__47Ex: ;

}
// $ANTLR end T__47

//   Comes from: 44:7: ( 'arithmetic' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__48
 *
 * Looks to match the characters the constitute the token T__48
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__48(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__48;
       
    
    // scma.g:44:7: ( 'arithmetic' )
    // scma.g:44:9: 'arithmetic'
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleT__48Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__48Ex; /* Prevent compiler warnings */
    ruleT__48Ex: ;

}
// $ANTLR end T__48

//   Comes from: 45:7: ( 'relational' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__49
 *
 * Looks to match the characters the constitute the token T__49
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__49(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__49;
       
    
    // scma.g:45:7: ( 'relational' )
    // scma.g:45:9: 'relational'
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleT__49Ex;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__49Ex; /* Prevent compiler warnings */
    ruleT__49Ex: ;

}
// $ANTLR end T__49

//   Comes from: 485:14: ( '<' | '>' | '<=' | '>=' | '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RELATIONAL_OP
 *
 * Looks to match the characters the constitute the token RELATIONAL_OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRELATIONAL_OP(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RELATIONAL_OP;
       
    
    {
        //  scma.g:485:14: ( '<' | '>' | '<=' | '>=' | '=' )
        
        ANTLR3_UINT32 alt1;

        alt1=5;

        switch ( LA(1) ) 
        {
        case '<':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt1=3;
        			}
        		    break;

        		default:
        		    alt1=1;}

        	}
            break;
        case '>':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt1=4;
        			}
        		    break;

        		default:
        		    alt1=2;}

        	}
            break;
        case '=':
        	{
        		alt1=5;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 1;
            EXCEPTION->state        = 0;


            goto ruleRELATIONAL_OPEx;
        }

        switch (alt1) 
        {
    	case 1:
    	    // scma.g:485:16: '<'
    	    {
    	        MATCHC('<'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleRELATIONAL_OPEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // scma.g:485:22: '>'
    	    {
    	        MATCHC('>'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleRELATIONAL_OPEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // scma.g:485:28: '<='
    	    {
    	        MATCHS(lit_24); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleRELATIONAL_OPEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // scma.g:485:35: '>='
    	    {
    	        MATCHS(lit_25); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleRELATIONAL_OPEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // scma.g:485:42: '='
    	    {
    	        MATCHC('='); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleRELATIONAL_OPEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRELATIONAL_OPEx; /* Prevent compiler warnings */
    ruleRELATIONAL_OPEx: ;

}
// $ANTLR end RELATIONAL_OP

//   Comes from: 489:12: ( '+' | '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ADDITION_OP
 *
 * Looks to match the characters the constitute the token ADDITION_OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mADDITION_OP(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ADDITION_OP;
       
    
    // scma.g:489:12: ( '+' | '-' )
    // scma.g:
    {
        if ( LA(1) == '+' || LA(1) == '-' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleADDITION_OPEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleADDITION_OPEx; /* Prevent compiler warnings */
    ruleADDITION_OPEx: ;

}
// $ANTLR end ADDITION_OP

//   Comes from: 491:11: ( '*' | '/' | '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PRODUCT_OP
 *
 * Looks to match the characters the constitute the token PRODUCT_OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPRODUCT_OP(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PRODUCT_OP;
       
    
    // scma.g:491:11: ( '*' | '/' | '%' )
    // scma.g:
    {
        if ( LA(1) == '%' || LA(1) == '*' || LA(1) == '/' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto rulePRODUCT_OPEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePRODUCT_OPEx; /* Prevent compiler warnings */
    rulePRODUCT_OPEx: ;

}
// $ANTLR end PRODUCT_OP

//   Comes from: 493:11: ( 'and' | 'or' | 'implies' | 'equiv' | 'xor' | 'xnor' | '->' | '&&' | '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BOOLEAN_OP
 *
 * Looks to match the characters the constitute the token BOOLEAN_OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBOOLEAN_OP(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BOOLEAN_OP;
       
    
    {
        //  scma.g:493:11: ( 'and' | 'or' | 'implies' | 'equiv' | 'xor' | 'xnor' | '->' | '&&' | '||' )
        
        ANTLR3_UINT32 alt2;

        alt2=9;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		alt2=1;
        	}
            break;
        case 'o':
        	{
        		alt2=2;
        	}
            break;
        case 'i':
        	{
        		alt2=3;
        	}
            break;
        case 'e':
        	{
        		alt2=4;
        	}
            break;
        case 'x':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				alt2=5;
        			}
        		    break;
        		case 'n':
        			{
        				alt2=6;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 2;
        		    EXCEPTION->state        = 5;


        		    goto ruleBOOLEAN_OPEx;
        		}

        	}
            break;
        case '-':
        	{
        		alt2=7;
        	}
            break;
        case '&':
        	{
        		alt2=8;
        	}
            break;
        case '|':
        	{
        		alt2=9;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state        = 0;


            goto ruleBOOLEAN_OPEx;
        }

        switch (alt2) 
        {
    	case 1:
    	    // scma.g:493:14: 'and'
    	    {
    	        MATCHS(lit_26); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // scma.g:493:22: 'or'
    	    {
    	        MATCHS(lit_27); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // scma.g:493:29: 'implies'
    	    {
    	        MATCHS(lit_28); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // scma.g:493:41: 'equiv'
    	    {
    	        MATCHS(lit_29); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // scma.g:493:51: 'xor'
    	    {
    	        MATCHS(lit_30); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // scma.g:493:59: 'xnor'
    	    {
    	        MATCHS(lit_31); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // scma.g:494:3: '->'
    	    {
    	        MATCHS(lit_32); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // scma.g:494:10: '&&'
    	    {
    	        MATCHS(lit_33); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // scma.g:494:17: '||'
    	    {
    	        MATCHS(lit_34); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOLEAN_OPEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBOOLEAN_OPEx; /* Prevent compiler warnings */
    ruleBOOLEAN_OPEx: ;

}
// $ANTLR end BOOLEAN_OP

//   Comes from: 497:7: ( '\"' ( . )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;
       
    
    // scma.g:497:7: ( '\"' ( . )* '\"' )
    // scma.g:497:9: '\"' ( . )* '\"'
    {
        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


        // scma.g:497:13: ( . )*

        for (;;)
        {
            int alt3=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA3_0 = LA(1);
                if ( (LA3_0 == '"') ) 
                {
                    alt3=2;
                }
                else if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '!')) || ((LA3_0 >= '#') && (LA3_0 <= 0xFFFF))) ) 
                {
                    alt3=1;
                }

            }
            switch (alt3) 
            {
        	case 1:
        	    // scma.g:497:13: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */

        MATCHC('"'); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 500:5: ( LETTER ( LETTER | '!' | '.' | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENTIFIER
 *
 * Looks to match the characters the constitute the token IDENTIFIER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENTIFIER(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENTIFIER;
       
    
    // scma.g:500:5: ( LETTER ( LETTER | '!' | '.' | '0' .. '9' )* )
    // scma.g:500:7: LETTER ( LETTER | '!' | '.' | '0' .. '9' )*
    {
        /* 500:7: LETTER ( LETTER | '!' | '.' | '0' .. '9' )* */
        mLETTER(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleIDENTIFIEREx;
        }


        // scma.g:500:14: ( LETTER | '!' | '.' | '0' .. '9' )*

        for (;;)
        {
            int alt4=2;
            switch ( LA(1) ) 
            {
            case '!':
            case '$':
            case '.':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt4=1;
            	}
                break;

            }

            switch (alt4) 
            {
        	case 1:
        	    // scma.g:
        	    {
        	        if ( LA(1) == '!' || LA(1) == '$' || LA(1) == '.' || ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDENTIFIEREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDENTIFIEREx; /* Prevent compiler warnings */
    ruleIDENTIFIEREx: ;

}
// $ANTLR end IDENTIFIER

//   Comes from: 505:5: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLETTER(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // scma.g:505:5: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
    // scma.g:
    {
        if ( LA(1) == '$' || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLETTEREx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 511:17: ( ( '0' | '1' .. '9' ( '0' .. '9' )* ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DECIMAL_LITERAL
 *
 * Looks to match the characters the constitute the token DECIMAL_LITERAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDECIMAL_LITERAL(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DECIMAL_LITERAL;
       
    
    // scma.g:511:17: ( ( '0' | '1' .. '9' ( '0' .. '9' )* ) )
    // scma.g:511:19: ( '0' | '1' .. '9' ( '0' .. '9' )* )
    {

        // scma.g:511:19: ( '0' | '1' .. '9' ( '0' .. '9' )* )
        {
            int alt6=2;
            switch ( LA(1) ) 
            {
            case '0':
            	{
            		alt6=1;
            	}
                break;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            	{
            		alt6=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto ruleDECIMAL_LITERALEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // scma.g:511:20: '0'
        	    {
        	        MATCHC('0'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleDECIMAL_LITERALEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // scma.g:511:26: '1' .. '9' ( '0' .. '9' )*
        	    {
        	        MATCHRANGE('1', '9'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleDECIMAL_LITERALEx;
        	        }


        	        // scma.g:511:35: ( '0' .. '9' )*

        	        for (;;)
        	        {
        	            int alt5=2;
        	            switch ( LA(1) ) 
        	            {
        	            case '0':
        	            case '1':
        	            case '2':
        	            case '3':
        	            case '4':
        	            case '5':
        	            case '6':
        	            case '7':
        	            case '8':
        	            case '9':
        	            	{
        	            		alt5=1;
        	            	}
        	                break;

        	            }

        	            switch (alt5) 
        	            {
        	        	case 1:
        	        	    // scma.g:511:35: '0' .. '9'
        	        	    {
        	        	        MATCHRANGE('0', '9'); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleDECIMAL_LITERALEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop5;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop5: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDECIMAL_LITERALEx; /* Prevent compiler warnings */
    ruleDECIMAL_LITERALEx: ;

}
// $ANTLR end DECIMAL_LITERAL

//   Comes from: 513:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // scma.g:513:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
    // scma.g:513:8: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || ((LA(1) >= '\f') && (LA(1) <= '\r')) || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 517:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    // scma.g:517:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
    // scma.g:517:7: '/*' ( options {greedy=false; } : . )* '*/'
    {
        MATCHS(lit_35); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }



        // scma.g:517:12: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt7=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA7_0 = LA(1);
                if ( (LA7_0 == '*') ) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA7_1 = LA(2);
                        if ( (LA7_1 == '/') ) 
                        {
                            alt7=2;
                        }
                        else if ( (((LA7_1 >= 0x0000) && (LA7_1 <= '.')) || ((LA7_1 >= '0') && (LA7_1 <= 0xFFFF))) ) 
                        {
                            alt7=1;
                        }

                    }
                }
                else if ( (((LA7_0 >= 0x0000) && (LA7_0 <= ')')) || ((LA7_0 >= '+') && (LA7_0 <= 0xFFFF))) ) 
                {
                    alt7=1;
                }

            }
            switch (alt7) 
            {
        	case 1:
        	    // scma.g:517:42: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop7;	/* break out of the loop */
        	    break;
            }
        }
        loop7: ; /* Jump out to here if this rule does not match */

        MATCHS(lit_36); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }


        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 521:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LINE_COMMENT
 *
 * Looks to match the characters the constitute the token LINE_COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLINE_COMMENT(pscmaLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LINE_COMMENT;
       
    
    // scma.g:521:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // scma.g:521:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        MATCHS(lit_37); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }



        // scma.g:521:12: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt8=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA8_0 = LA(1);
                if ( (((LA8_0 >= 0x0000) && (LA8_0 <= '\t')) || ((LA8_0 >= 0x000B) && (LA8_0 <= '\f')) || ((LA8_0 >= 0x000E) && (LA8_0 <= 0xFFFF))) ) 
                {
                    alt8=1;
                }

            }
            switch (alt8) 
            {
        	case 1:
        	    // scma.g:521:12: ~ ( '\\n' | '\\r' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop8;	/* break out of the loop */
        	    break;
            }
        }
        loop8: ; /* Jump out to here if this rule does not match */


        // scma.g:521:26: ( '\\r' )?
        {
            int alt9=2;
            switch ( LA(1) ) 
            {
                case '\r':
                	{
                		alt9=1;
                	}
                    break;
            }

            switch (alt9) 
            {
        	case 1:
        	    // scma.g:521:26: '\\r'
        	    {
        	        MATCHC('\r'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleLINE_COMMENTEx;
        	        }


        	    }
        	    break;

            }
        }
        MATCHC('\n'); 
        if  (HASEXCEPTION())
        {
            goto ruleLINE_COMMENTEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLINE_COMMENTEx; /* Prevent compiler warnings */
    ruleLINE_COMMENTEx: ;

}
// $ANTLR end LINE_COMMENT

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pscmaLexer ctx)
{
    {
        //  scma.g:1:8: ( T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | RELATIONAL_OP | ADDITION_OP | PRODUCT_OP | BOOLEAN_OP | STRING | IDENTIFIER | DECIMAL_LITERAL | WS | COMMENT | LINE_COMMENT )
        
        ANTLR3_UINT32 alt10;

        alt10=45;

        switch ( LA(1) ) 
        {
        case 't':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'h':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'e':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'r':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'y':
        											{
        												switch ( LA(7) ) 
        												{
        												case '!':
        												case '$':
        												case '.':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=41;
        													}
        												    break;

        												default:
        												    alt10=1;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case '!':
        								case '$':
        								case '.':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=41;
        									}
        								    break;

        								default:
        								    alt10=25;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '{':
        	{
        		alt10=2;
        	}
            break;
        case 'c':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'a':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'n':
        													{
        														switch ( LA(8) ) 
        														{
        														case 't':
        															{
        																switch ( LA(9) ) 
        																{
        																case 's':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '!':
        																		case '$':
        																		case '.':
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt10=41;
        																			}
        																		    break;

        																		default:
        																		    alt10=3;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=12;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case ',':
        	{
        		alt10=4;
        	}
            break;
        case '}':
        	{
        		alt10=5;
        	}
            break;
        case 'g':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'm':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'm':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'a':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'r':
        													{
        														switch ( LA(8) ) 
        														{
        														case '!':
        														case '$':
        														case '.':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt10=41;
        															}
        														    break;

        														default:
        														    alt10=6;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'l':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'b':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'a':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'l':
        											{
        												switch ( LA(7) ) 
        												{
        												case '!':
        												case '$':
        												case '.':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=41;
        													}
        												    break;

        												default:
        												    alt10=14;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'n':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'u':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'm':
        					{
        						switch ( LA(4) ) 
        						{
        						case '_':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'o':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'p':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'r':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'a':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 't':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case 'i':
        																					{
        																						switch ( LA(12) ) 
        																						{
        																						case 'o':
        																							{
        																								switch ( LA(13) ) 
        																								{
        																								case 'n':
        																									{
        																										switch ( LA(14) ) 
        																										{
        																										case 's':
        																											{
        																												switch ( LA(15) ) 
        																												{
        																												case '_':
        																													{
        																														switch ( LA(16) ) 
        																														{
        																														case 'p':
        																															{
        																																switch ( LA(17) ) 
        																																{
        																																case 'e':
        																																	{
        																																		switch ( LA(18) ) 
        																																		{
        																																		case 'r':
        																																			{
        																																				switch ( LA(19) ) 
        																																				{
        																																				case '_':
        																																					{
        																																						switch ( LA(20) ) 
        																																						{
        																																						case 'c':
        																																							{
        																																								switch ( LA(21) ) 
        																																								{
        																																								case 'l':
        																																									{
        																																										switch ( LA(22) ) 
        																																										{
        																																										case 'a':
        																																											{
        																																												switch ( LA(23) ) 
        																																												{
        																																												case 'u':
        																																													{
        																																														switch ( LA(24) ) 
        																																														{
        																																														case 's':
        																																															{
        																																																switch ( LA(25) ) 
        																																																{
        																																																case 'e':
        																																																	{
        																																																		switch ( LA(26) ) 
        																																																		{
        																																																		case '_':
        																																																			{
        																																																				switch ( LA(27) ) 
        																																																				{
        																																																				case 'b':
        																																																					{
        																																																						switch ( LA(28) ) 
        																																																						{
        																																																						case 'o':
        																																																							{
        																																																								switch ( LA(29) ) 
        																																																								{
        																																																								case 'u':
        																																																									{
        																																																										switch ( LA(30) ) 
        																																																										{
        																																																										case 'n':
        																																																											{
        																																																												switch ( LA(31) ) 
        																																																												{
        																																																												case 'd':
        																																																													{
        																																																														switch ( LA(32) ) 
        																																																														{
        																																																														case '!':
        																																																														case '$':
        																																																														case '.':
        																																																														case '0':
        																																																														case '1':
        																																																														case '2':
        																																																														case '3':
        																																																														case '4':
        																																																														case '5':
        																																																														case '6':
        																																																														case '7':
        																																																														case '8':
        																																																														case '9':
        																																																														case 'A':
        																																																														case 'B':
        																																																														case 'C':
        																																																														case 'D':
        																																																														case 'E':
        																																																														case 'F':
        																																																														case 'G':
        																																																														case 'H':
        																																																														case 'I':
        																																																														case 'J':
        																																																														case 'K':
        																																																														case 'L':
        																																																														case 'M':
        																																																														case 'N':
        																																																														case 'O':
        																																																														case 'P':
        																																																														case 'Q':
        																																																														case 'R':
        																																																														case 'S':
        																																																														case 'T':
        																																																														case 'U':
        																																																														case 'V':
        																																																														case 'W':
        																																																														case 'X':
        																																																														case 'Y':
        																																																														case 'Z':
        																																																														case '_':
        																																																														case 'a':
        																																																														case 'b':
        																																																														case 'c':
        																																																														case 'd':
        																																																														case 'e':
        																																																														case 'f':
        																																																														case 'g':
        																																																														case 'h':
        																																																														case 'i':
        																																																														case 'j':
        																																																														case 'k':
        																																																														case 'l':
        																																																														case 'm':
        																																																														case 'n':
        																																																														case 'o':
        																																																														case 'p':
        																																																														case 'q':
        																																																														case 'r':
        																																																														case 's':
        																																																														case 't':
        																																																														case 'u':
        																																																														case 'v':
        																																																														case 'w':
        																																																														case 'x':
        																																																														case 'y':
        																																																														case 'z':
        																																																															{
        																																																																alt10=41;
        																																																															}
        																																																														    break;

        																																																														default:
        																																																														    alt10=7;}

        																																																													}
        																																																												    break;

        																																																												default:
        																																																												    alt10=41;}

        																																																											}
        																																																										    break;

        																																																										default:
        																																																										    alt10=41;}

        																																																									}
        																																																								    break;

        																																																								default:
        																																																								    alt10=41;}

        																																																							}
        																																																						    break;

        																																																						default:
        																																																						    alt10=41;}

        																																																					}
        																																																				    break;

        																																																				default:
        																																																				    alt10=41;}

        																																																			}
        																																																		    break;

        																																																		default:
        																																																		    alt10=41;}

        																																																	}
        																																																    break;

        																																																default:
        																																																    alt10=41;}

        																																															}
        																																														    break;

        																																														default:
        																																														    alt10=41;}

        																																													}
        																																												    break;

        																																												default:
        																																												    alt10=41;}

        																																											}
        																																										    break;

        																																										default:
        																																										    alt10=41;}

        																																									}
        																																								    break;

        																																								default:
        																																								    alt10=41;}

        																																							}
        																																						    break;

        																																						default:
        																																						    alt10=41;}

        																																					}
        																																				    break;

        																																				default:
        																																				    alt10=41;}

        																																			}
        																																		    break;

        																																		default:
        																																		    alt10=41;}

        																																	}
        																																    break;

        																																default:
        																																    alt10=41;}

        																															}
        																														    break;

        																														default:
        																														    alt10=41;}

        																													}
        																												    break;

        																												default:
        																												    alt10=41;}

        																											}
        																										    break;

        																										default:
        																										    alt10=41;}

        																									}
        																								    break;

        																								default:
        																								    alt10=41;}

        																							}
        																						    break;

        																						default:
        																						    alt10=41;}

        																					}
        																				    break;

        																				default:
        																				    alt10=41;}

        																			}
        																		    break;

        																		default:
        																		    alt10=41;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;
        								case 'q':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'u':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'a':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'n':
        															{
        																switch ( LA(9) ) 
        																{
        																case 't':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'i':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case 'f':
        																					{
        																						switch ( LA(12) ) 
        																						{
        																						case 'i':
        																							{
        																								switch ( LA(13) ) 
        																								{
        																								case 'e':
        																									{
        																										switch ( LA(14) ) 
        																										{
        																										case 'r':
        																											{
        																												switch ( LA(15) ) 
        																												{
        																												case 's':
        																													{
        																														switch ( LA(16) ) 
        																														{
        																														case '_':
        																															{
        																																switch ( LA(17) ) 
        																																{
        																																case 'b':
        																																	{
        																																		switch ( LA(18) ) 
        																																		{
        																																		case 'o':
        																																			{
        																																				switch ( LA(19) ) 
        																																				{
        																																				case 'u':
        																																					{
        																																						switch ( LA(20) ) 
        																																						{
        																																						case 'n':
        																																							{
        																																								switch ( LA(21) ) 
        																																								{
        																																								case 'd':
        																																									{
        																																										switch ( LA(22) ) 
        																																										{
        																																										case '!':
        																																										case '$':
        																																										case '.':
        																																										case '0':
        																																										case '1':
        																																										case '2':
        																																										case '3':
        																																										case '4':
        																																										case '5':
        																																										case '6':
        																																										case '7':
        																																										case '8':
        																																										case '9':
        																																										case 'A':
        																																										case 'B':
        																																										case 'C':
        																																										case 'D':
        																																										case 'E':
        																																										case 'F':
        																																										case 'G':
        																																										case 'H':
        																																										case 'I':
        																																										case 'J':
        																																										case 'K':
        																																										case 'L':
        																																										case 'M':
        																																										case 'N':
        																																										case 'O':
        																																										case 'P':
        																																										case 'Q':
        																																										case 'R':
        																																										case 'S':
        																																										case 'T':
        																																										case 'U':
        																																										case 'V':
        																																										case 'W':
        																																										case 'X':
        																																										case 'Y':
        																																										case 'Z':
        																																										case '_':
        																																										case 'a':
        																																										case 'b':
        																																										case 'c':
        																																										case 'd':
        																																										case 'e':
        																																										case 'f':
        																																										case 'g':
        																																										case 'h':
        																																										case 'i':
        																																										case 'j':
        																																										case 'k':
        																																										case 'l':
        																																										case 'm':
        																																										case 'n':
        																																										case 'o':
        																																										case 'p':
        																																										case 'q':
        																																										case 'r':
        																																										case 's':
        																																										case 't':
        																																										case 'u':
        																																										case 'v':
        																																										case 'w':
        																																										case 'x':
        																																										case 'y':
        																																										case 'z':
        																																											{
        																																												alt10=41;
        																																											}
        																																										    break;

        																																										default:
        																																										    alt10=10;}

        																																									}
        																																								    break;

        																																								default:
        																																								    alt10=41;}

        																																							}
        																																						    break;

        																																						default:
        																																						    alt10=41;}

        																																					}
        																																				    break;

        																																				default:
        																																				    alt10=41;}

        																																			}
        																																		    break;

        																																		default:
        																																		    alt10=41;}

        																																	}
        																																    break;

        																																default:
        																																    alt10=41;}

        																															}
        																														    break;

        																														default:
        																														    alt10=41;}

        																													}
        																												    break;

        																												default:
        																												    alt10=41;}

        																											}
        																										    break;

        																										default:
        																										    alt10=41;}

        																									}
        																								    break;

        																								default:
        																								    alt10=41;}

        																							}
        																						    break;

        																						default:
        																						    alt10=41;}

        																					}
        																				    break;

        																				default:
        																				    alt10=41;}

        																			}
        																		    break;

        																		default:
        																		    alt10=41;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '!':
        						case '$':
        						case '.':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=41;
        							}
        						    break;

        						default:
        						    alt10=28;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '=':
        	{
        		alt10=8;
        	}
            break;
        case ';':
        	{
        		alt10=9;
        	}
            break;
        case 'v':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'c':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'b':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=11;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'v':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'r':
        											{
        												switch ( LA(7) ) 
        												{
        												case 's':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'a':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'l':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '!':
        																		case '$':
        																		case '.':
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt10=41;
        																			}
        																		    break;

        																		default:
        																		    alt10=13;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'e':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'x':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'e':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'n':
        													{
        														switch ( LA(8) ) 
        														{
        														case 't':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'i':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'a':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case 'l':
        																					{
        																						switch ( LA(12) ) 
        																						{
        																						case '!':
        																						case '$':
        																						case '.':
        																						case '0':
        																						case '1':
        																						case '2':
        																						case '3':
        																						case '4':
        																						case '5':
        																						case '6':
        																						case '7':
        																						case '8':
        																						case '9':
        																						case 'A':
        																						case 'B':
        																						case 'C':
        																						case 'D':
        																						case 'E':
        																						case 'F':
        																						case 'G':
        																						case 'H':
        																						case 'I':
        																						case 'J':
        																						case 'K':
        																						case 'L':
        																						case 'M':
        																						case 'N':
        																						case 'O':
        																						case 'P':
        																						case 'Q':
        																						case 'R':
        																						case 'S':
        																						case 'T':
        																						case 'U':
        																						case 'V':
        																						case 'W':
        																						case 'X':
        																						case 'Y':
        																						case 'Z':
        																						case '_':
        																						case 'a':
        																						case 'b':
        																						case 'c':
        																						case 'd':
        																						case 'e':
        																						case 'f':
        																						case 'g':
        																						case 'h':
        																						case 'i':
        																						case 'j':
        																						case 'k':
        																						case 'l':
        																						case 'm':
        																						case 'n':
        																						case 'o':
        																						case 'p':
        																						case 'q':
        																						case 'r':
        																						case 's':
        																						case 't':
        																						case 'u':
        																						case 'v':
        																						case 'w':
        																						case 'x':
        																						case 'y':
        																						case 'z':
        																							{
        																								alt10=41;
        																							}
        																						    break;

        																						default:
        																						    alt10=15;}

        																					}
        																				    break;

        																				default:
        																				    alt10=41;}

        																			}
        																		    break;

        																		default:
        																		    alt10=41;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;
        										case 's':
        											{
        												switch ( LA(7) ) 
        												{
        												case '!':
        												case '$':
        												case '.':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=41;
        													}
        												    break;

        												default:
        												    alt10=31;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'q':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'i':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'v':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=39;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'l':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'c':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=16;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'i':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '!':
        						case '$':
        						case '.':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=41;
        							}
        						    break;

        						default:
        						    alt10=17;}

        					}
        				    break;
        				case 'd':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'x':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=33;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'm':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'p':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'e':
        											{
        												switch ( LA(7) ) 
        												{
        												case 's':
        													{
        														switch ( LA(8) ) 
        														{
        														case '!':
        														case '$':
        														case '.':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt10=41;
        															}
        														    break;

        														default:
        														    alt10=39;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '[':
        	{
        		switch ( LA(2) ) 
        		{
        		case ']':
        			{
        				alt10=18;
        			}
        		    break;

        		default:
        		    alt10=19;}

        	}
            break;
        case ']':
        	{
        		alt10=20;
        	}
            break;
        case 'b':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'a':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'n':
        													{
        														switch ( LA(8) ) 
        														{
        														case '!':
        														case '$':
        														case '.':
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt10=41;
        															}
        														    break;

        														default:
        														    alt10=21;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'n':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'd':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=32;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '-':
        	{
        		switch ( LA(2) ) 
        		{
        		case '>':
        			{
        				alt10=39;
        			}
        		    break;

        		default:
        		    alt10=22;}

        	}
            break;
        case '(':
        	{
        		alt10=23;
        	}
            break;
        case ')':
        	{
        		alt10=24;
        	}
            break;
        case 'f':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'l':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '!':
        										case '$':
        										case '.':
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=41;
        											}
        										    break;

        										default:
        										    alt10=26;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'l':
        											{
        												switch ( LA(7) ) 
        												{
        												case '!':
        												case '$':
        												case '.':
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt10=41;
        													}
        												    break;

        												default:
        												    alt10=29;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '!':
        	{
        		alt10=27;
        	}
            break;
        case '.':
        	{
        		alt10=30;
        	}
            break;
        case 'a':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'h':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'm':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case 't':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'i':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'c':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case '!':
        																				case '$':
        																				case '.':
        																				case '0':
        																				case '1':
        																				case '2':
        																				case '3':
        																				case '4':
        																				case '5':
        																				case '6':
        																				case '7':
        																				case '8':
        																				case '9':
        																				case 'A':
        																				case 'B':
        																				case 'C':
        																				case 'D':
        																				case 'E':
        																				case 'F':
        																				case 'G':
        																				case 'H':
        																				case 'I':
        																				case 'J':
        																				case 'K':
        																				case 'L':
        																				case 'M':
        																				case 'N':
        																				case 'O':
        																				case 'P':
        																				case 'Q':
        																				case 'R':
        																				case 'S':
        																				case 'T':
        																				case 'U':
        																				case 'V':
        																				case 'W':
        																				case 'X':
        																				case 'Y':
        																				case 'Z':
        																				case '_':
        																				case 'a':
        																				case 'b':
        																				case 'c':
        																				case 'd':
        																				case 'e':
        																				case 'f':
        																				case 'g':
        																				case 'h':
        																				case 'i':
        																				case 'j':
        																				case 'k':
        																				case 'l':
        																				case 'm':
        																				case 'n':
        																				case 'o':
        																				case 'p':
        																				case 'q':
        																				case 'r':
        																				case 's':
        																				case 't':
        																				case 'u':
        																				case 'v':
        																				case 'w':
        																				case 'x':
        																				case 'y':
        																				case 'z':
        																					{
        																						alt10=41;
        																					}
        																				    break;

        																				default:
        																				    alt10=34;}

        																			}
        																		    break;

        																		default:
        																		    alt10=41;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'd':
        					{
        						switch ( LA(4) ) 
        						{
        						case '!':
        						case '$':
        						case '.':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=41;
        							}
        						    break;

        						default:
        						    alt10=39;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'r':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'l':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'i':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'o':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'n':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'a':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case 'l':
        																			{
        																				switch ( LA(11) ) 
        																				{
        																				case '!':
        																				case '$':
        																				case '.':
        																				case '0':
        																				case '1':
        																				case '2':
        																				case '3':
        																				case '4':
        																				case '5':
        																				case '6':
        																				case '7':
        																				case '8':
        																				case '9':
        																				case 'A':
        																				case 'B':
        																				case 'C':
        																				case 'D':
        																				case 'E':
        																				case 'F':
        																				case 'G':
        																				case 'H':
        																				case 'I':
        																				case 'J':
        																				case 'K':
        																				case 'L':
        																				case 'M':
        																				case 'N':
        																				case 'O':
        																				case 'P':
        																				case 'Q':
        																				case 'R':
        																				case 'S':
        																				case 'T':
        																				case 'U':
        																				case 'V':
        																				case 'W':
        																				case 'X':
        																				case 'Y':
        																				case 'Z':
        																				case '_':
        																				case 'a':
        																				case 'b':
        																				case 'c':
        																				case 'd':
        																				case 'e':
        																				case 'f':
        																				case 'g':
        																				case 'h':
        																				case 'i':
        																				case 'j':
        																				case 'k':
        																				case 'l':
        																				case 'm':
        																				case 'n':
        																				case 'o':
        																				case 'p':
        																				case 'q':
        																				case 'r':
        																				case 's':
        																				case 't':
        																				case 'u':
        																				case 'v':
        																				case 'w':
        																				case 'x':
        																				case 'y':
        																				case 'z':
        																					{
        																						alt10=41;
        																					}
        																				    break;

        																				default:
        																				    alt10=35;}

        																			}
        																		    break;

        																		default:
        																		    alt10=41;}

        																	}
        																    break;

        																default:
        																    alt10=41;}

        															}
        														    break;

        														default:
        														    alt10=41;}

        													}
        												    break;

        												default:
        												    alt10=41;}

        											}
        										    break;

        										default:
        										    alt10=41;}

        									}
        								    break;

        								default:
        								    alt10=41;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '<':
        case '>':
        	{
        		alt10=36;
        	}
            break;
        case '+':
        	{
        		alt10=37;
        	}
            break;
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '*':
        			{
        				alt10=44;
        			}
        		    break;
        		case '/':
        			{
        				alt10=45;
        			}
        		    break;

        		default:
        		    alt10=38;}

        	}
            break;
        case 'o':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case '!':
        				case '$':
        				case '.':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=41;
        					}
        				    break;

        				default:
        				    alt10=39;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case 'x':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case '!':
        						case '$':
        						case '.':
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt10=41;
        							}
        						    break;

        						default:
        						    alt10=39;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case '!':
        								case '$':
        								case '.':
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=41;
        									}
        								    break;

        								default:
        								    alt10=39;}

        							}
        						    break;

        						default:
        						    alt10=41;}

        					}
        				    break;

        				default:
        				    alt10=41;}

        			}
        		    break;

        		default:
        		    alt10=41;}

        	}
            break;
        case '&':
        case '|':
        	{
        		alt10=39;
        	}
            break;
        case '"':
        	{
        		alt10=40;
        	}
            break;
        case '$':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'd':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'p':
        case 'q':
        case 's':
        case 'w':
        case 'y':
        case 'z':
        	{
        		alt10=41;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt10=42;
        	}
            break;
        case '\t':
        case '\n':
        case '\f':
        case '\r':
        case ' ':
        	{
        		alt10=43;
        	}
            break;
        case '%':
        case '*':
        	{
        		alt10=38;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 10;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt10) 
        {
    	case 1:
    	    // scma.g:1:10: T__15
    	    {
    	        /* 1:10: T__15 */
    	        mT__15(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // scma.g:1:16: T__16
    	    {
    	        /* 1:16: T__16 */
    	        mT__16(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // scma.g:1:22: T__17
    	    {
    	        /* 1:22: T__17 */
    	        mT__17(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // scma.g:1:28: T__18
    	    {
    	        /* 1:28: T__18 */
    	        mT__18(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // scma.g:1:34: T__19
    	    {
    	        /* 1:34: T__19 */
    	        mT__19(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // scma.g:1:40: T__20
    	    {
    	        /* 1:40: T__20 */
    	        mT__20(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // scma.g:1:46: T__21
    	    {
    	        /* 1:46: T__21 */
    	        mT__21(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // scma.g:1:52: T__22
    	    {
    	        /* 1:52: T__22 */
    	        mT__22(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // scma.g:1:58: T__23
    	    {
    	        /* 1:58: T__23 */
    	        mT__23(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // scma.g:1:64: T__24
    	    {
    	        /* 1:64: T__24 */
    	        mT__24(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // scma.g:1:70: T__25
    	    {
    	        /* 1:70: T__25 */
    	        mT__25(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // scma.g:1:76: T__26
    	    {
    	        /* 1:76: T__26 */
    	        mT__26(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // scma.g:1:82: T__27
    	    {
    	        /* 1:82: T__27 */
    	        mT__27(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // scma.g:1:88: T__28
    	    {
    	        /* 1:88: T__28 */
    	        mT__28(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // scma.g:1:94: T__29
    	    {
    	        /* 1:94: T__29 */
    	        mT__29(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // scma.g:1:100: T__30
    	    {
    	        /* 1:100: T__30 */
    	        mT__30(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // scma.g:1:106: T__31
    	    {
    	        /* 1:106: T__31 */
    	        mT__31(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // scma.g:1:112: T__32
    	    {
    	        /* 1:112: T__32 */
    	        mT__32(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // scma.g:1:118: T__33
    	    {
    	        /* 1:118: T__33 */
    	        mT__33(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // scma.g:1:124: T__34
    	    {
    	        /* 1:124: T__34 */
    	        mT__34(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // scma.g:1:130: T__35
    	    {
    	        /* 1:130: T__35 */
    	        mT__35(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // scma.g:1:136: T__36
    	    {
    	        /* 1:136: T__36 */
    	        mT__36(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // scma.g:1:142: T__37
    	    {
    	        /* 1:142: T__37 */
    	        mT__37(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // scma.g:1:148: T__38
    	    {
    	        /* 1:148: T__38 */
    	        mT__38(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // scma.g:1:154: T__39
    	    {
    	        /* 1:154: T__39 */
    	        mT__39(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // scma.g:1:160: T__40
    	    {
    	        /* 1:160: T__40 */
    	        mT__40(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // scma.g:1:166: T__41
    	    {
    	        /* 1:166: T__41 */
    	        mT__41(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // scma.g:1:172: T__42
    	    {
    	        /* 1:172: T__42 */
    	        mT__42(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // scma.g:1:178: T__43
    	    {
    	        /* 1:178: T__43 */
    	        mT__43(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // scma.g:1:184: T__44
    	    {
    	        /* 1:184: T__44 */
    	        mT__44(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // scma.g:1:190: T__45
    	    {
    	        /* 1:190: T__45 */
    	        mT__45(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // scma.g:1:196: T__46
    	    {
    	        /* 1:196: T__46 */
    	        mT__46(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // scma.g:1:202: T__47
    	    {
    	        /* 1:202: T__47 */
    	        mT__47(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // scma.g:1:208: T__48
    	    {
    	        /* 1:208: T__48 */
    	        mT__48(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // scma.g:1:214: T__49
    	    {
    	        /* 1:214: T__49 */
    	        mT__49(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // scma.g:1:220: RELATIONAL_OP
    	    {
    	        /* 1:220: RELATIONAL_OP */
    	        mRELATIONAL_OP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // scma.g:1:234: ADDITION_OP
    	    {
    	        /* 1:234: ADDITION_OP */
    	        mADDITION_OP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // scma.g:1:246: PRODUCT_OP
    	    {
    	        /* 1:246: PRODUCT_OP */
    	        mPRODUCT_OP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // scma.g:1:257: BOOLEAN_OP
    	    {
    	        /* 1:257: BOOLEAN_OP */
    	        mBOOLEAN_OP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // scma.g:1:268: STRING
    	    {
    	        /* 1:268: STRING */
    	        mSTRING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // scma.g:1:275: IDENTIFIER
    	    {
    	        /* 1:275: IDENTIFIER */
    	        mIDENTIFIER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // scma.g:1:286: DECIMAL_LITERAL
    	    {
    	        /* 1:286: DECIMAL_LITERAL */
    	        mDECIMAL_LITERAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // scma.g:1:302: WS
    	    {
    	        /* 1:302: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // scma.g:1:305: COMMENT
    	    {
    	        /* 1:305: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // scma.g:1:313: LINE_COMMENT
    	    {
    	        /* 1:313: LINE_COMMENT */
    	        mLINE_COMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
