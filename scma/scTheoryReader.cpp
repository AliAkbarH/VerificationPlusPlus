/** \file main.c
 *  Test the grammar written, Adapted from Jim Idle which is adpated from Java equivalent
 * \brief Driver file
 *  example, by Terence Parr
 * \author Mohamad Noureddine
 */

#include <iostream>
#include <scmaLexer.h>
#include <scmaParser.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
//#include <QDebug>
#include <scTheory.h>

#include<z3.h>
#include <scma.h>

using namespace std;

// Main entry point for this example
//
//SCTheory * ANTLR3_CDECL
//mini_main	(const string & inputFile)
bool
SpecCheckVocab :: readTheoryFile() {
    pANTLR3_UINT8 fName = (pANTLR3_UINT8)(theoryFileName.c_str());
    //qDebug() << fName;
    std::cout<<fName;
    pANTLR3_INPUT_STREAM input = antlr3AsciiFileStreamNew(fName);
    //qDebug() << input;
    std::cout<<fName;
    if ( input == NULL)
    {
        fprintf(stderr, "Failed to open file %s\n", (char *)fName);
        exit(1);
    }

    pscmaLexer lxr = scmaLexerNew(input); // CLexerNew is generated by ANTLR
    if ( lxr == NULL )
    {
        fprintf(stderr, "Unable to create the lexer due to malloc() failure1\n");
        exit(1);
    }

    pANTLR3_COMMON_TOKEN_STREAM tstream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
    if (tstream == NULL)
    {
        fprintf(stderr, "Out of memory trying to allocate token stream\n");
        exit(1);
    }

    // Finally, now that we have our lexer constructed, we can create the parser
    //
    pscmaParser psr = scmaParserNew(tstream);  // CParserNew is generated by ANTLR3
    if (psr == NULL)
    {
        fprintf(stderr, "Out of memory trying to allocate parser\n");
        exit(ANTLR3_ERR_NOMEM);
    }
    th = psr->translation_unit(psr);

    psr	    ->free  (psr);	    psr = NULL;
    tstream ->free  (tstream);	    tstream = NULL;
    lxr	    ->free  (lxr);	    lxr = NULL;
    input   ->close (input);	    input = NULL;

    return true;
}
